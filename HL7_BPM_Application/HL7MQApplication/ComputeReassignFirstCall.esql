BROKER SCHEMA HL7MQApplication


CREATE COMPUTE MODULE ComputeReassignFirstCall
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		--new
		DECLARE inCCSID INT InputProperties.CodedCharSetId;
		DECLARE inEncoding INT InputProperties.Encoding;
		DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID);
		--new
		-- CALL CopyEntireMessage();
		IF NULLIF(inBitStream,'') IS NOT NULL THEN  --new
			DECLARE response REFERENCE TO InputRoot.XMLNSC.reassignRequest;
			
		    SET OutputRoot.Properties = InputRoot.Properties;
		    SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = '{';
		    IF NULLIF (InputLocalEnvironment.Destination.JSON.Data.patientId, '') IS NOT NULL  THEN
				SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || '"patientId"';
		    	--SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || ':' || '"' || response.patientId || '"';
		    	SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || ':' || '"' || InputLocalEnvironment.Destination.JSON.Data.patientId || '"';
	
		    END IF;
		    
		    IF NULLIF (InputLocalEnvironment.Destination.JSON.Data.nosologicId, '') IS NOT NULL  THEN
				SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || ', "nosologicId"';
		    	--SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || ':' || '"' || response.nosologicId || '"';
		    	SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || ':' || '"' || InputLocalEnvironment.Destination.JSON.Data.nosologicId || '"';
		    	
	
		    END IF;
		    --new
		    SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || ', "firstReassign"';
		    SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || ':' || '"1"';
		    --new
		    SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = OutputLocalEnvironment.Destination.HTTP.QueryString.params || '}';
	
			SET OutputLocalEnvironment.Destination.HTTP.QueryString.action = 'start';
			--SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = '{"patientId":"' || '111'  || '"}';
			--SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = '{"idWT":"' || '3' ||'"}';
			--SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = '{"idWT":"' || response.taskType  || '", "maClinicalType":"' || response.typology  || '", "idClinicalPathwayPhase":"' || response.pathwayPhase  || '", "idClinicalPathway":"' || response.clinicalPathway  || '", "dateFrom":"' || response.dateFrom  || '", "dateTo":"' || response.dateTo  || '", "nurseId":"' || response.nurseId  || '", "patientId":"' || response.patientId  || '", "nosologicId":"' || response.nosologicId  || '"}';
			SET OutputLocalEnvironment.Destination.HTTP.QueryString.createTask = 'false';
			SET OutputLocalEnvironment.Destination.HTTP.QueryString.parts = 'all';
			SET OutputLocalEnvironment.Destination.JSON.Data.patientId = InputLocalEnvironment.Destination.JSON.Data.patientId;
			PROPAGATE TO TERMINAL 'out' FINALIZE NONE;
			RETURN FALSE;
		ELSE --new
			--SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 400;
			--SET OutputRoot.JSON.Data.errorCode = '400';
			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') NAME 'DFDL';
			SET OutputRoot.DFDL.ns1:ACK.ns1:MSA.ns1:"MSA.2.MessageControlID" = 'KO';
			PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
			RETURN FALSE;
			--SET OutputRoot.JSON.Data.errorMessage = 'Errore di comunicazione con il BPM';
		END IF; --new
		
		--RETURN TRUE;
		RETURN FALSE;--NEW
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


