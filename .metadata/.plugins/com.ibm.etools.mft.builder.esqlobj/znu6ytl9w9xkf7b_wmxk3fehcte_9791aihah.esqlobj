/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();

		DECLARE response REFERENCE TO InputRoot.XMLNSC.ns:senderResponse;
		DECLARE errorResponse REFERENCE TO InputRoot.XMLNSC.ns:senderResponse;
		--GESTIONE ERRORE
		MOVE errorResponse FIRSTCHILD NAME 'error';
		IF LASTMOVE(errorResponse) THEN
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 400;
			SET OutputRoot.JSON.Data.errorCode = errorResponse.errorCode;
			SET OutputRoot.JSON.Data.errorMessage = errorResponse.errorMessage;
			RETURN TRUE;
		END IF; 

		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 200;

		--MAP MODEL TO JSON
		MOVE response FIRSTCHILD;

		IF LASTMOVE(response) THEN
			MOVE response FIRSTCHILD NAMESPACE ns NAME 'parameter';	
			--array di misurazioni
			DECLARE refOutJSON REFERENCE TO OutputRoot;
			DECLARE refMeasures REFERENCE TO OutputRoot;
			CREATE FIELD OutputRoot.JSON.Data AS refOutJSON IDENTITY (JSON.Array)Data;
			DECLARE ind INTEGER 1;
			
 			WHILE LASTMOVE(response) DO
 				--new
 				DECLARE refValues REFERENCE TO response;
				MOVE refValues FIRSTCHILD NAMESPACE ns NAME 'values';
				IF NULLIF (response.taskId, '') IS NOT NULL THEN
	 				CREATE LASTCHILD OF refOutJSON AS refMeasures NAME 'Item';
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'id' VALUE response.taskId;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'title' VALUE refValues.measureName;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'description' VALUE refValues.value;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'userId' VALUE response.userId;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'date' VALUE response.date;
	 				
	 				IF (refValues.measureId = 'NINF001') THEN
	 					CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'important' VALUE 'false';
	 				ELSEIF (refValues.measureId = 'NINF101') THEN
	 					CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'important' VALUE 'true';
	 				ELSE
	 					CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'important' VALUE 'false';
	 				END IF;
					--each parameter can have more than one values that represent Attachment
					CREATE LASTCHILD OF refMeasures AS refMeasures IDENTITY (JSON.Array)attachment;
					WHILE LASTMOVE(refValues) DO
						DECLARE refAttach REFERENCE TO refValues;
						DECLARE refOutAttach REFERENCE TO refMeasures;
						MOVE refAttach FIRSTCHILD NAME 'attachment';
						IF NULLIF (refAttach.id, '') IS NOT NULL THEN
							WHILE LASTMOVE(refAttach) DO
								CREATE LASTCHILD OF refMeasures AS refOutAttach NAME 'Item';
								SET refOutAttach.id = refAttach.id;
			 					SET refOutAttach.base64 = refAttach.base64;
			 					SET refOutAttach.type = refAttach.type;
			 					MOVE refAttach NEXTSIBLING REPEAT NAME;
							END WHILE;	
						END IF;
						MOVE refValues NEXTSIBLING REPEAT NAME;
					END WHILE;
				END IF;
				SET ind = ind + 1;
				MOVE response NEXTSIBLING;
	 		END WHILE;
			RETURN TRUE;
		END IF;
		

		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 200;
		--CREATE LASTCHILD OF OutputRoot Domain('JSON');
		--SET OutputRoot.JSON.Data.ns:senderResponse.error.errorCode = 1;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
