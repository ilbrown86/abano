CREATE COMPUTE MODULE BlobToJSONTasks

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--luca
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		

		
		DECLARE inCCSID INT InputProperties.CodedCharSetId;
		DECLARE inEncoding INT InputProperties.Encoding;
		DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID);
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(inBitStream, inEncoding, inCCSID,'BLOB', 'JSON');
		DECLARE response REFERENCE TO OutputRoot.JSON.Data.data.data.taskList.items;
		IF LASTMOVE(response) THEN
			MOVE response FIRSTCHILD NAME 'Item';	
			--array di misurazioni
			DECLARE refOutJSON REFERENCE TO OutputRoot;
			DECLARE refMeasures REFERENCE TO OutputRoot;
			DECLARE measure ROW;
			CREATE FIELD OutputRoot.JSON.Data AS refOutJSON IDENTITY (JSON.Array)Data;
			
			DECLARE ind INTEGER 1;
 			WHILE LASTMOVE(response) DO
 				DECLARE refValues REFERENCE TO response;
				DECLARE refMeasureId REFERENCE TO measure;
 				
				CREATE LASTCHILD OF measure AS refMeasureId NAME 'item';
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'taskId' VALUE refValues.taskId;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'taskIdSchedulation' VALUE refValues.taskIdSchedulation;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'creationDate' VALUE refValues.creationDate;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'dueDate' VALUE refValues.dueDate;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'patientId' VALUE refValues.patientId;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'nosologicId' VALUE refValues.nosologicId;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'bed' VALUE refValues.bed;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'compartment' VALUE refValues.compartment;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'instanceId' VALUE refValues.pathWayInstanceId;
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'taskType' VALUE refValues.taskType;
				
				--luca
				--CREATE LASTCHILD OF refMeasureId AS refMeasureId NAME 'owners';
				--CREATE LASTCHILD OF refMeasureId AS refMeasureId IDENTITY (JSON.Array)owners;
				
				DECLARE i INTEGER 1;
				FOR source AS refValues.users.items.Item[]  DO
					--CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'owner'  VALUE refValues.users.items.Item[i];
					IF NULLIF(refMeasureId.owner,'') IS NOT NULL THEN
						SET refMeasureId.owner = refMeasureId.owner || ', '|| refValues.users.items.Item[i];
					ELSE
						SET refMeasureId.owner = refValues.users.items.Item[i];
					END IF;
					
					SET i = i + 1;
				END FOR;
				--luca
--				CREATE LASTCHILD OF refMeasureId AS refMeasureId IDENTITY (JSON.Array)owner;
--				WHILE LASTMOVE(refValues) DO
--					DECLARE refOwner REFERENCE TO refValues;
--					DECLARE refOutOwner REFERENCE TO refMeasures;
--					MOVE refAttach FIRSTCHILD NAME 'owner';
--				
--					WHILE LASTMOVE(refOwner) DO
--						CREATE LASTCHILD OF refMeasures AS refOutOwner NAME 'Item';
--						SET refOutOwner.nurseId = refOwner.Item;
--	 					
--	 					MOVE refOwner NEXTSIBLING REPEAT NAME;
--					END WHILE;	
--				
--					MOVE refValues NEXTSIBLING REPEAT NAME;
--				END WHILE;

				
				SET ind = ind + 1;
				MOVE response NEXTSIBLING;
	 		END WHILE;
	 		DECLARE a CHARACTER;
	 		SET a = 1;
	 		SET refOutJSON = measure;
 		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
			WHILE I < J DO
				SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;