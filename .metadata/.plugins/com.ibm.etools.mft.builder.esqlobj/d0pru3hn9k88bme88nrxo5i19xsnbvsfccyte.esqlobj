/*EATE FUNCTION Main() RETURNS BOOLE*/
    BEGIN
        DECLARE hl7 NAMESPACE 'urn:hl7-org:v2xml';
        DECLARE env REFERENCE TO Environment.PatternVariables;      

        SET OutputRoot.Properties = InputRoot.Properties;
        SET OutputLocalEnvironment = InputLocalEnvironment;
        -- Copy environment variables into local environment
        -- This helps if the exception occurs in this compute node itself
        SET OutputLocalEnvironment.PatternVariables = Environment.PatternVariables;
        
        -- Reset the environment variables
        -- The filter node routes message to false terminal when exception occurs here
        SET env.FlowMilestoneReached = ' ';
        SET env.SendNACK = ' ';
        SET env.EndConnection = ' ';
        SET env.HL7RC = ' ';
        SET env.ErrorCondition = ' ';
        
        DECLARE LocalEnv REFERENCE TO OutputLocalEnvironment.PatternVariables;
        
        -- Create MSH and MSA segment under OutputRoot.DFDL
        CREATE FIELD OutputRoot.DFDL.hl7:HL7.hl7:MSH;
        CREATE FIELD OutputRoot.DFDL.hl7:HL7.hl7:anyHL7Segment.hl7:MSA;   

        IF (LocalEnv.FlowMilestoneReached IS NOT NULL) THEN
            IF (LocalEnv.SendNACK = 'YES') THEN
                -- Build MSH segment for acknowledgement message
                CALL BuildACKMSH(LocalEnv.InputMSH, OutputRoot.DFDL.hl7:HL7.hl7:MSH);             
                -- Build MSA segment for acknowledgement message
                CALL BuildACKMSA(LocalEnv.InputMSH, OutputRoot.DFDL.hl7:HL7.hl7:anyHL7Segment.hl7:MSA, LocalEnv.HL7RC, LocalEnv.ErrorCondition);                
            END IF;
        ELSE
            SET LocalEnv.HL7RC = 'AR';
            DECLARE MessageNumber INTEGER 0;
            DECLARE MessageText CHARACTER ' ';
            CALL GetLastExceptionDetail(InputExceptionList, MessageNumber, MessageText);            

            IF MessageNumber > 0 THEN
                SET LocalEnv.ErrorCondition = ('BIP') || (CAST (MessageNumber AS CHARACTER)) || (' : ') || (MessageText);
                -- Build MSH segment for acknowledgement message
                CALL BuildACKMSH(LocalEnv.InputMSH, OutputRoot.DFDL.hl7:HL7.hl7:MSH);             
                -- Build MSH segment for acknowledgement message
                CALL BuildACKMSA(LocalEnv.InputMSH, OutputRoot.DFDL.hl7:HL7.hl7:anyHL7Segment.hl7:MSA, LocalEnv.HL7RC, LocalEnv.ErrorCondition);                

                SET OutputLocalEnvironment.SendNACK = 'YES';
            END IF;
        END IF;
        
        SET FailureCount = FailureCount + 1; -- Increase the failure count
        
        IF LocalEnv.SendNACK = 'YES' THEN
            DECLARE hl7BitStream BLOB
                ASBITSTREAM(OutputRoot.DFDL
                    CCSID OutputRoot.Properties.CodedCharSetId
                    ENCODING OutputRoot.Properties.Encoding
                    SET ReceiverMessageSet
                    TYPE ReceiverMessageType
                    FORMAT ReceiverMessageFormat);
         DECLARE LeadingMLLPBytes BLOB X'0B';
            -- Add leading MLLP bytes       
            SET OutputRoot.BLOB.BLOB = LeadingMLLPBytes||hl7BitStream;  

            SET OutputRoot.DFDL = NULL; -- Delete the DFDL tree
            PROPAGATE TO TERMINAL 'out1' Message OutputRoot DELETE NONE; -- Propagates the ACK message to TCPIPServerOutput node
            SET OutputRoot.BLOB.BLOB = NULL; -- This statement gets executed if the propagate statement is successful in delivering the ACK message
        END IF;     

        -- Close the TCPIP connection if the following condition is satisfied
        -- Also reset the failure count
        -- Error limit is defined by the pattern parameter
        DECLARE ErrorLimit INTEGER;
     SET ErrorLimit =  0;
        IF ((LocalEnv.EndConnection = 'YES') OR ((ErrorLimit > 0) AND (FailureCount > ErrorLimit))) THEN
            SET FailureCount = 0;
            PROPAGATE TO TERMINAL 'out2' DELETE NONE;
        END IF;
        SET OutputRoot = InputRoot;             
        RETURN TRUE;    
    END;    

