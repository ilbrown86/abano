CREATE COMPUTE MODULE AssignementBPM_MapToSAAssignment
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputRoot.Properties.ContentType = 'application/json';
		
		DECLARE inCCSID INT InputProperties.CodedCharSetId;
		DECLARE inEncoding INT InputProperties.Encoding;
		DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID);
		CREATE LASTCHILD OF InputRoot DOMAIN('XMLNSC') PARSE(inBitStream, inEncoding, inCCSID,'BLOB', 'XMLNSC');
		-- CALL CopyEntireMessage();
		DECLARE refOutJSON REFERENCE TO OutputRoot;
		DECLARE refTask REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot.JSON.Data AS refOutJSON NAME 'tasks' ;
		SET OutputRoot.JSON.Data.tasks TYPE = JSON.Array;
		
		DECLARE response REFERENCE TO InputRoot.XMLNSC.tasks;
		DECLARE i INTEGER 1;
		FOR source AS response.task[]  DO
		
			CREATE LASTCHILD OF refOutJSON AS refTask NAME 'Item';
			CREATE LASTCHILD OF refTask TYPE NameValue NAME 'taskId' VALUE response.task[i].taskId;
			CREATE LASTCHILD OF refTask TYPE NameValue NAME 'taskType' VALUE response.task[i].taskType;
			CREATE LASTCHILD OF refTask TYPE NameValue NAME 'creationDate' VALUE response.task[i].creationDate;
			CREATE LASTCHILD OF refTask TYPE NameValue NAME 'patientType' VALUE response.task[i].patientType;
			CREATE LASTCHILD OF refTask TYPE NameValue NAME 'pathWayPhaseId' VALUE 'PRE';
			SET i = i + 1;
		END FOR;
				
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;