/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();

		DECLARE response REFERENCE TO InputRoot.XMLNSC.ns:senderResponse;
		DECLARE parameter REFERENCE TO InputRoot.XMLNSC.ns:senderResponse;
		DECLARE errorResponse REFERENCE TO InputRoot.XMLNSC.ns:senderResponse;
		--GESTIONE ERRORE
		MOVE errorResponse FIRSTCHILD NAME 'error';
		IF LASTMOVE(errorResponse) THEN
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 400;
			SET OutputRoot.JSON.Data.errorCode = errorResponse.errorCode;
			SET OutputRoot.JSON.Data.errorMessage = errorResponse.errorMessage;
			RETURN TRUE;
		END IF; 

		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 200;

		--MAP MODEL TO JSON
		MOVE response FIRSTCHILD;
		
		IF LASTMOVE(response) THEN
			--MOVE response FIRSTCHILD NAMESPACE ns NAME 'parameter';	
			
			--MOVE response FIRSTCHILD;		
			--DATI ANAGRAFICI
			SET OutputRoot.JSON.Data.id = response.nosologicId;
			SET OutputRoot.JSON.Data.name = response.name;
			SET OutputRoot.JSON.Data.surname = response.surname;
			SET OutputRoot.JSON.Data.dischargeDate = response.dischargeDate;
			SET OutputRoot.JSON.Data.diagnosis = response.diagnosis;
			SET OutputRoot.JSON.Data.pathway = response.pathway;
			SET OutputRoot.JSON.Data.bedNumber = response.bedNumber;
			SET OutputRoot.JSON.Data.division = response.division;
			SET OutputRoot.JSON.Data.class = response.class;
			SET OutputRoot.JSON.Data.birthdate = response.birthdate;
			SET OutputRoot.JSON.Data.sex = response.sex;
			SET OutputRoot.JSON.Data.race = response.race;
			SET OutputRoot.JSON.Data.address = response.address;
			SET OutputRoot.JSON.Data.fiscalcode = response.fiscalcode;
			SET OutputRoot.JSON.Data.admissionDate = response.admissionDate;
			SET OutputRoot.JSON.Data.surgeryDate = response.surgeryDate;
			SET OutputRoot.JSON.Data.pid = response.patientIdentifierList;
			--DATI RICOVERO
			--CERCA I DATI DEL RICOVERO ATTIVO
			DECLARE refAdmission REFERENCE to response;
			IF GetFocusedAdmission(refAdmission) THEN
				SET OutputRoot.JSON.Data.id = refAdmission.nosologicId;
				SET OutputRoot.JSON.Data.dischargeDate = response.dischargeDate;
				SET OutputRoot.JSON.Data.diagnosis = response.diagnosis;
				SET OutputRoot.JSON.Data.bedNumber = response.bedNumber;
				SET OutputRoot.JSON.Data.division = response.division;
				SET OutputRoot.JSON.Data.class = response.class;
				SET OutputRoot.JSON.Data.admissionDate = response.admissionDate;
				SET OutputRoot.JSON.Data.surgeryDate = response.surgeryDate;
			ELSE
				SET OutputRoot.JSON.Data.id = '';
				SET OutputRoot.JSON.Data.dischargeDate = '';
				SET OutputRoot.JSON.Data.diagnosis = '';
				SET OutputRoot.JSON.Data.bedNumber = '';
				SET OutputRoot.JSON.Data.division = '';
				SET OutputRoot.JSON.Data.class = '';
				SET OutputRoot.JSON.Data.admissionDate = '';
				SET OutputRoot.JSON.Data.surgeryDate = '';
			END IF; 
		
			--NOTE
			MOVE response FIRSTCHILD NAMESPACE ns NAME 'parameter';
			DECLARE refOutJSON REFERENCE TO OutputRoot;
			DECLARE refMeasures REFERENCE TO OutputRoot;


			CREATE FIELD OutputRoot.JSON.Data.notes AS refOutJSON IDENTITY (JSON.Array)notes;

			DECLARE ind INTEGER 1;
	
			WHILE LASTMOVE(response) DO
 				
 				IF NULLIF(response.taskId,'') IS NOT NULL THEN
	 				DECLARE refValues REFERENCE TO response;
					MOVE refValues FIRSTCHILD NAMESPACE ns NAME 'values';
					DECLARE ind2 INTEGER 1;
					DECLARE refOutValues REFERENCE TO OutputRoot;
	 				CREATE LASTCHILD OF refOutJSON AS refMeasures NAME 'Item';
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'id' VALUE response.taskId;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'title' VALUE refValues.measureName;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'description' VALUE refValues.value;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'userId' VALUE response.userId;
	 				CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'date' VALUE response.date;
	 				
	 				IF (refValues.measureId = 'NINF001') THEN
	 					CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'important' VALUE 'false';
	 				ELSEIF (refValues.measureId = 'NINF101') THEN
	 					CREATE LASTCHILD OF refMeasures TYPE NameValue NAME 'important' VALUE 'true';
	 				END IF;

					CREATE LASTCHILD OF refMeasures AS refMeasures IDENTITY (JSON.Array)attachment;	

				END IF;


				SET ind = ind + 1;
				MOVE response NEXTSIBLING;
 				
	 		END WHILE;
			--new
			RETURN TRUE;
		END IF;
		


		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 200;
		--CREATE LASTCHILD OF OutputRoot Domain('JSON');
		--SET OutputRoot.JSON.Data.ns:senderResponse.error.errorCode = 1;
		RETURN TRUE;
	END;

	CREATE FUNCTION GetFocusedAdmission (INOUT refAdmission REFERENCE) RETURNS BOOLEAN 
	BEGIN
		MOVE refAdmission FIRSTCHILD NAME 'admission';
		WHILE LASTMOVE(refAdmission) OR refAdmission.focusOn = FALSE DO
			MOVE refAdmission NEXTSIBLING REPEAT NAME;
		END WHILE;
		RETURN refAdmission.focusOn;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
