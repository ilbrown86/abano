CREATE COMPUTE MODULE BlobToJSON
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--luca
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
--		DECLARE prova REFERENCE TO InputRoot.BLOB;
		--MOVE prova LASTCHILD;
	--	MOVE prova FIRSTCHILD NAME 'BLOB';
		
		
		DECLARE inCCSID INT InputProperties.CodedCharSetId;
		DECLARE inEncoding INT InputProperties.Encoding;
		DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID);
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(inBitStream, inEncoding, inCCSID,'BLOB', 'JSON');
		DECLARE response REFERENCE TO OutputRoot.JSON.Data.data.data;
		DECLARE refOutJSON REFERENCE TO OutputRoot;
		MOVE response LASTCHILD;
		--CREATE FIELD OutputRoot.JSON.Data AS refOutJSON IDENTITY (JSON.Object)Data;
		SET OutputRoot = response;
		
		--luca
--		CALL CopyMessageHeaders();
--		SET OutputRoot.Properties.ContentType = 'application/json';
--		
--		DECLARE inCCSID INT InputProperties.CodedCharSetId;
--		DECLARE inEncoding INT InputProperties.Encoding;
--		DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID);
--		CREATE LASTCHILD OF InputRoot DOMAIN('JSON') PARSE(inBitStream, inEncoding, inCCSID,'BLOB', 'JSON');
--		
		
		
		--MOVE response FIRSTCHILD NAME 'data';	
		--MOVE response FIRSTCHILD NAME 'sa';
		--MOVE response FIRSTCHILD NAME 'items';	
			
		
		--DECLARE response REFERENCE TO OutputRoot.JSON.Data;
		
--		DECLARE i INTEGER 1;
--		FOR source AS OutputRoot.JSON.Data.Item[]  DO
--			
--			DECLARE response REFERENCE TO OutputRoot.JSON.Data.Item[i];
--			DECLARE users REFERENCE TO response.users;
--			DECLARE lista CHARACTER;
--			DECLARE j INTEGER 1;
--			FOR source AS users.Item[]  DO
--				IF j=1 THEN
--					SET lista = '"' || users.Item[j] || '"';
--				ELSE
--					SET lista = lista || ', "' || users.Item[j] || '"';
--				END IF;
--				
--				SET j = j + 1;
--			END FOR;
--				
--			SET OutputLocalEnvironment.Destination.HTTP.QueryString.action = 'start';
--			SET OutputLocalEnvironment.Destination.HTTP.QueryString.params = '{"taskId":"' || response.taskId  || '", "users": [' || lista || ']}'; 
--			
--			SET OutputLocalEnvironment.Destination.HTTP.QueryString.createTask = 'false';
--			SET OutputLocalEnvironment.Destination.HTTP.QueryString.parts = 'all';
--			PROPAGATE TO TERMINAL 'out' FINALIZE NONE DELETE NONE;
--
--			SET i = i + 1;
--		END FOR;
		

		

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
			WHILE I < J DO
				SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;