CREATE COMPUTE MODULE getPatientListFromDivision_putInEnvironment
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		-- METTE IL RISULTATO NEL LETTO
		DECLARE refBed REFERENCE TO Environment.Variables.HL7Model.senderResponse;
		DECLARE refPatientDetails REFERENCE TO InputRoot.XMLNSC;
		MOVE refPatientDetails FIRSTCHILD;
		MOVE refPatientDetails FIRSTCHILD;
		MOVE refBed LASTCHILD;
		set refBed.patient = refPatientDetails;
		MOVE refPatientDetails FIRSTCHILD;
		DECLARE numberImportantNotes INTEGER 0;
		IF LASTMOVE(refPatientDetails) THEN
			MOVE refPatientDetails FIRSTCHILD NAMESPACE ns NAME 'parameter';
			DECLARE ind INTEGER 1;
 			WHILE LASTMOVE(refPatientDetails) DO
 				DECLARE valore REFERENCE TO refPatientDetails;
 				MOVE valore FIRSTCHILD NAMESPACE ns NAME 'values';
 					IF NULLIF(valore.measureId,'') IS NOT NULL AND (valore.measureId = 'NINF101') THEN
 						SET numberImportantNotes = numberImportantNotes + 1;
 						
 					END IF;
 				SET ind = ind + 1;
				MOVE refPatientDetails NEXTSIBLING;
				
	 		END WHILE;
		END IF;
		set refBed.patient.numberImportantNotes = numberImportantNotes;
		DECLARE a INTEGER 0;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;