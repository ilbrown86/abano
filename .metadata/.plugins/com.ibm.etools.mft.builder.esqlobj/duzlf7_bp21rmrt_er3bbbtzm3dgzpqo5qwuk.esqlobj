/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();

		DECLARE patientId CHARACTER;
		SET patientId = InputLocalEnvironment.REST.Input.Parameters.patientId;
		DECLARE nosologicId CHARACTER;
		SET nosologicId = InputLocalEnvironment.REST.Input.Parameters.nosologicId;
		
		
		DECLARE outputMessage REFERENCE TO OutputRoot; 
		DECLARE outPatientKey REFERENCE TO OutputRoot;
		DECLARE outParameters REFERENCE TO OutputRoot;
		DECLARE outValues REFERENCE TO OutputRoot;
		 
		CREATE LASTCHILD OF OutputRoot AS outputMessage DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE FIRSTCHILD OF outputMessage as outputMessage NAMESPACE ns NAME 'senderRequest';
		DECLARE msgId CHARACTER InputLocalEnvironment.Destination.HTTP.RequestIdentifier;
		SET msgId = REPLACE(msgId,'''','');
		SET msgId = 'H' || msgId;
		SET outputMessage.messageId = msgId;
		
		SET outputMessage.action = InputLocalEnvironment.REST.Input.Operation;
		CREATE LASTCHILD OF outputMessage AS outputMessage NAME 'writeParametersRequest';
		CREATE LASTCHILD OF outputMessage AS outPatientKey NAME 'patient';
		SET outPatientKey.patientIdentifierList = patientId;
		SET outPatientKey.nosologicId = nosologicId;
		SET outPatientKey.attachPresent = 'false';
		--lista parametri
		CREATE LASTCHILD OF outputMessage AS outParameters NAME 'parameter';
		--assign uniqueID to taskId. id is not relevant
		IF NULLIF (InputRoot.JSON.Data.id,'') IS NOT NULL THEN
			SET outParameters.taskId = InputRoot.JSON.Data.id;
		ELSE
			SET outParameters.taskId = CAST (CURRENT_TIMESTAMP AS CHARACTER FORMAT 'YYYYMMddHHmmss');
		END IF;
		SET outParameters.id = 1;--COALESCE(NULLIF(InputRoot.JSON.Data.taskId,''), CAST (CURRENT_TIMESTAMP AS CHARACTER FORMAT 'YYYYMMddHHmmss'));
			
		SET Environment.Variables.HL7RestAPI.NoteId = outParameters.taskId;
		
		SET outParameters.userId = InputRoot.JSON.Data.userId;
		SET outParameters.date = CAST(CAST(InputRoot.JSON.Data.date AS TIMESTAMP FORMAT 'YYYY-MM-dd HH.mm.ss') AS CHARACTER FORMAT 'YYYYMMddHHmmss');
		CREATE LASTCHILD OF outParameters AS outValues NAME 'values';
		IF (InputRoot.JSON.Data.important = 'true')  THEN
			SET outValues.measureId = 'NINF101';
		ELSE
			SET outValues.measureId = 'NINF001';	

		END IF;
		SET outValues.measureName = InputRoot.JSON.Data.title;							
		SET outValues.value = InputRoot.JSON.Data.description;				
		--ATTACHMENT
		DECLARE refInAttach REFERENCE TO InputRoot.JSON.Data;
		DECLARE refOutAttach REFERENCE TO outValues;
		MOVE refInAttach FIRSTCHILD NAME 'attachments';
		
		DECLARE i INTEGER 1;
		FOR source AS refInAttach.Item[]  DO
			SET outPatientKey.attachPresent = 'true';
			CREATE LASTCHILD OF outValues AS refOutAttach NAME 'attachment';
			SET refOutAttach.id = refInAttach.Item[i].id;
			SET refOutAttach.base64 = refInAttach.Item[i].base64;
			SET refOutAttach.type = refInAttach.Item[i].type;
			SET i = i + 1;
		END FOR;
			
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
