CREATE COMPUTE MODULE BlobToJSONTasks

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--luca
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		

		
		DECLARE inCCSID INT InputProperties.CodedCharSetId;
		DECLARE inEncoding INT InputProperties.Encoding;
		DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID);
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(inBitStream, inEncoding, inCCSID,'BLOB', 'JSON');
		DECLARE response REFERENCE TO OutputRoot.JSON.Data.data.data.taskList.items;
		IF LASTMOVE(response) THEN
			MOVE response FIRSTCHILD NAME 'Item';	
			--array di misurazioni
			DECLARE refOutJSON REFERENCE TO OutputRoot;
			DECLARE refMeasures REFERENCE TO OutputRoot;
			DECLARE measure ROW;
			
			DECLARE ind INTEGER 1;
 			WHILE LASTMOVE(response) DO
 				DECLARE refValues REFERENCE TO response;
				CREATE LASTCHILD OF measure AS refMeasureId NAME 'item';
				CREATE LASTCHILD OF refMeasureId TYPE NameValue NAME 'taskId' VALUE refValues.taskId;
				
				SET ind = ind + 1;
				MOVE response NEXTSIBLING;
	 		END WHILE;
	 		DECLARE a CHARACTER;
	 		SET a = 1;
	 		--SET refOutJSON = measure;
 		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
			WHILE I < J DO
				SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;