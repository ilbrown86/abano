CREATE COMPUTE MODULE patientListFromKeys_MapToJSONModel
CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();
		DECLARE risposta REFERENCE TO Environment.Variables.HL7RestAPI.patientRef;

		--DECLARE errorResponse REFERENCE TO InputRoot.XMLNSC.ns:senderResponse;

		DECLARE refOutJSON REFERENCE TO OutputRoot;
		DECLARE refMeasures REFERENCE TO OutputRoot;
		CREATE FIELD OutputRoot.JSON.Data AS refOutJSON IDENTITY (JSON.Array)Data;

		--loop over patients
		MOVE risposta FIRSTCHILD;
		
		WHILE LASTMOVE(risposta) DO
--			DECLARE patientId CHARACTER;
--			SET patientId = risposta.patientId;
--			DECLARE nosologicId CHARACTER;
--			SET nosologicId = risposta.nosologicId;
			
			CREATE LASTCHILD OF refOutJSON AS refMeasures NAME 'Item';
 		

			DECLARE risposta2 REFERENCE TO risposta;
			MOVE risposta2 FIRSTCHILD NAME 'patient';
			--move into issues to ,
			MOVE risposta2 FIRSTCHILD;
			--errore
			DECLARE errorResponse REFERENCE TO risposta2;
			MOVE errorResponse FIRSTCHILD NAME 'error';
			IF LASTMOVE(errorResponse) THEN
				SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 400;
				--SET OutputRoot.JSON.Data.errorCode = errorResponse.errorCode;
				--SET OutputRoot.JSON.Data.errorMessage = errorResponse.errorMessage;
				
				SET refMeasures.errorCode = errorResponse.errorCode;
				SET refMeasures.errorMessage = errorResponse.errorMessage;
				RETURN TRUE;
			END IF; 
			--errore
			MOVE risposta2 FIRSTCHILD;
			
			IF LASTMOVE(risposta2) THEN
--				MOVE risposta2 FIRSTCHILD NAMESPACE ns NAME 'parameter';	

				DECLARE refAdmission REFERENCE TO risposta2;
				MOVE refAdmission FIRSTCHILD NAME 'admission';
				SET refMeasures.id = refAdmission.nosologicId;
				IF NULLIF(risposta2.name,'') IS NOT NULL THEN
					SET refMeasures.name = risposta2.name;
				ELSE
					SET refMeasures.name = '';
				END IF;
				
				IF NULLIF(risposta2.surname,'') IS NOT NULL THEN
					SET refMeasures.surname = risposta2.surname;
				ELSE
					SET refMeasures.surname = '';
				END IF;
				IF NULLIF(refAdmission.dischargeDate,'') IS NOT NULL THEN
					SET refMeasures.dischargeDate = refAdmission.dischargeDate;
				ELSE
					SET refMeasures.dischargeDate = '';
				END IF;
				IF NULLIF(risposta2.diagnosis,'') IS NOT NULL THEN
					SET refMeasures.diagnosis = risposta2.diagnosis;
				ELSE
					SET refMeasures.diagnosis = '';
				END IF;
				
				IF NULLIF(refAdmission.bedNumber,'') IS NOT NULL THEN
					SET refMeasures.bedNumber = refAdmission.bedNumber;
				ELSE
					SET refMeasures.bedNumber = '';
				END IF;
				
				IF NULLIF(refAdmission.division,'') IS NOT NULL THEN
					SET refMeasures.division = refAdmission.division;
				ELSE
					SET refMeasures.division = '';
				END IF;
				
				IF NULLIF(refAdmission.class,'') IS NOT NULL THEN
					SET refMeasures.class = refAdmission.class;
				ELSE
					SET refMeasures.class = '';
				END IF;
				
				IF NULLIF(risposta2.birthdate,'') IS NOT NULL THEN
					SET refMeasures.birthdate = risposta2.birthdate;
				ELSE
					SET refMeasures.birthdate = '';
				END IF;
				
				IF NULLIF(risposta2.sex,'') IS NOT NULL THEN
					SET refMeasures.sex = risposta2.sex;
				ELSE
					SET refMeasures.sex = '';
				END IF;
				
				IF NULLIF(risposta2.race,'') IS NOT NULL THEN
					SET refMeasures.race = risposta2.race;
				ELSE
					SET refMeasures.race = '';
				END IF;			
				
				IF NULLIF(risposta2.address,'') IS NOT NULL THEN
					SET refMeasures.address = risposta2.address;
				ELSE
					SET refMeasures.address = '';
				END IF;
				
				IF NULLIF(risposta2.fiscalcode,'') IS NOT NULL THEN
					SET refMeasures.fiscalcode = risposta2.fiscalcode;
				ELSE
					SET refMeasures.fiscalcode = '';
				END IF;
				
				IF NULLIF(refAdmission.admissionDate,'') IS NOT NULL THEN
					SET refMeasures.admissionDate = refAdmission.admissionDate;
				ELSE
					SET refMeasures.admissionDate = '';
				END IF;
				
				IF NULLIF(refAdmission.admissionTime,'') IS NOT NULL THEN
					SET refMeasures.admissionTime = refAdmission.admissionTime;
				ELSE
					SET refMeasures.admissionTime = '';
				END IF;
				
--				IF NULLIF(refAdmission.surgeryDate,'') IS NOT NULL THEN
--					SET refMeasures.surgeryDate = refAdmission.surgeryDate;
--				ELSE
--					SET refMeasures.surgeryDate = '';
--				END IF;
				
				IF NULLIF(risposta2.patientIdentifierList,'') IS NOT NULL THEN
					SET refMeasures.pid = risposta2.patientIdentifierList;
				ELSE
					SET refMeasures.pid = '';
				END IF;
				
--				IF NULLIF(risposta2.type,'') IS NOT NULL THEN
--					SET refMeasures.type = risposta2.type;
--				ELSE
--					SET refMeasures.type = '';
--				END IF;
--				
				
				IF NULLIF(refAdmission.surgeryExpectedDate,'') IS NOT NULL THEN
					SET refMeasures.surgeryExpectedDate = refAdmission.surgeryExpectedDate;
				ELSE
					SET refMeasures.surgeryExpectedDate = '';
				END IF;
				
				IF NULLIF(refAdmission.surgeryExpectedTime,'') IS NOT NULL THEN
					SET refMeasures.surgeryExpectedTime = refAdmission.surgeryExpectedTime;
				ELSE
					SET refMeasures.surgeryExpectedTime = '';
				END IF;
				
				IF NULLIF(refAdmission.surgeryEndDate,'') IS NOT NULL THEN
					SET refMeasures.surgeryEndDate = refAdmission.surgeryEndDate;
				ELSE
					SET refMeasures.surgeryEndDate = '';
				END IF;
				
				IF NULLIF(refAdmission.surgeryEndTime,'') IS NOT NULL THEN
					SET refMeasures.surgeryEndTime = refAdmission.surgeryEndTime;
				ELSE
					SET refMeasures.surgeryEndTime = '';
				END IF;
				
				IF NULLIF(refAdmission.type,'') IS NOT NULL THEN
					SET refMeasures.type = refAdmission.type;
				ELSE
					SET refMeasures.type = '';
				END IF;
				
				
				
			END IF;

			MOVE risposta NEXTSIBLING REPEAT NAME;
		END WHILE;
		

		
	

		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 200;
		--CREATE LASTCHILD OF OutputRoot Domain('JSON');
		--SET OutputRoot.JSON.Data.ns:senderResponse.error.errorCode = 1;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;